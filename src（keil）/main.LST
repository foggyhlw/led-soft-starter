C51 COMPILER V9.59.0.0   MAIN                                                              12/08/2022 19:18:00 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\development_programs\keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TAB
                    -S(2)

line level    source

   1          #include "stc12c5608ad.h"
   2          #include "funtions.h"
   3          #include <intrins.h>
   4          volatile int trigger_logic = 1;   //1:positive trigger   0: negtive trigger
   5          WORD time_seq[]={100,200,400,600,800};
   6          volatile BYTE rise_time_index = 1;
   7          volatile BYTE fall_time_index = 1;
   8          
   9          void main()
  10          {
  11   1        Init_PCA();
  12   1        Init_Timer0();
  13   1        Init_GPIO();
  14   1        Init_UART();
  15   1        SendString("use r[x]f[y] to set rise and fall time.\n each time have 5 levels, for example, \n if you wan
             -t to set rise time level 2 and fall time level 3, use: r2f3\n");
  16   1        rise_time_index = ISPReadByte(ISP_ADDRESS);
  17   1        fall_time_index = ISPReadByte(ISP_ADDRESS+1);
  18   1        if (rise_time_index == 0xff || fall_time_index == 0xff || rise_time_index > 0x04 ||  rise_time_index > 0x
             -04){
  19   2          rise_time_index = 1;
  20   2          fall_time_index = 1;
  21   2        }
  22   1        
  23   1        while(1)
  24   1        {
  25   2          if(P32 == 0){
  26   3            trigger_logic = 0;
  27   3          }
  28   2          else{
  29   3            trigger_logic = 1;
  30   3          }
  31   2          if(P33==0)
  32   2          {
  33   3            debounce();
  34   3            if(P33==0)
  35   3            {
  36   4              direction = (trigger_logic ==1 )?0:1;
  37   4            }
  38   3          }
  39   2          if(P33==1)
  40   2          {
  41   3            debounce();
  42   3            if(P33==1)
  43   3            {
  44   4              direction = (trigger_logic ==1 )?1:0;
  45   4            }
  46   3          }
  47   2        }
  48   1      }
  49          
  50          void debounce()    //20ms delay
  51          {
  52   1        unsigned char i, j, k;
C51 COMPILER V9.59.0.0   MAIN                                                              12/08/2022 19:18:00 PAGE 2   

  53   1        i = 2;
  54   1        j = 103;
  55   1        k = 147;
  56   1        do
  57   1        {
  58   2          do
  59   2          {
  60   3            while (--k);
  61   3          } while (--j);
  62   2        } while (--i);
  63   1      }
  64           
  65          void Init_GlobalVariables()
  66          {
  67   1      }
  68          
  69          void Init_GPIO()
  70          {
  71   1        //P3M0 = 0x03;
  72   1        //P3M1 = 0x0f; 
  73   1        P3M0 = 0x00; 
  74   1        P3M1 = 0x0c; 
  75   1      
  76   1        //P0M0 |= 0x01;
  77   1        //P0M1 |= 0x00;   //P01 input
  78   1      }
  79          
  80          void Init_PCA()
  81          {
  82   1        CMOD=0x04;   //timer0 overflow
  83   1        CCON=0x00;
  84   1        CCAPM0=0x42;
  85   1        CCAPM1=0x42;
  86   1        CCAPM2=0x42;
  87   1        CCAPM3=0x42;
  88   1        CL=CH=0;
  89   1        CCAP0L=CCAP0H=0;
  90   1        CCAP1L=CCAP1H=0;
  91   1        CCAP2L=CCAP2H=0;
  92   1        CCAP3L=CCAP3H=0;
  93   1        CCAP0H=0x90;
  94   1        CCAP1H=0x90;
  95   1        CCAP2H=0x90;
  96   1        CCAP3H=0x90;
  97   1        CR=1;
  98   1      }
  99          
 100          void Init_UART()
 101          {
 102   1        PCON &= 0x7F;   //波特率不倍速
 103   1        SCON = 0x50;    //8位数据,可变波特率
 104   1        AUXR |= 0x40;   //定时器时钟1T模式
 105   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
 106   1        TMOD &= 0x0F;   //设置定时器模式
 107   1        TMOD |= 0x20;   //设置定时器模式
 108   1        TL1 = 0xD9;   //设置定时初始值
 109   1        TH1 = 0xD9;   //设置定时重载值
 110   1        ET1 = 0;    //禁止定时器%d中断
 111   1        TR1 = 1;    //定时器1开始计时
 112   1        ES = 1;
 113   1      }
 114            
C51 COMPILER V9.59.0.0   MAIN                                                              12/08/2022 19:18:00 PAGE 3   

 115          void SendData(BYTE dat)
 116          {
 117   1        SBUF=dat;
 118   1        while(TI==0);
 119   1        TI=0;
 120   1      }
 121          
 122          void SendString(BYTE *ps)
 123          {
 124   1        EA= 0;
 125   1        while((*ps)!='\0')
 126   1        {
 127   2          SBUF= *ps;
 128   2          while(TI==0);
 129   2          TI= 0;
 130   2          ps++;
 131   2        }
 132   1          EA= 1;
 133   1      }
 134          
 135          void ClearRX_BUF()
 136          {
 137   1        BYTE i=0;
 138   1        for (i=0; i<BUF_LEN; i++)
 139   1        {
 140   2          RX_BUFFER[i]=0;
 141   2        }
 142   1      }
 143          
 144          void Init_Timer0()
 145          {
 146   1         // AUXR = AUXR|0x80;
 147   1        TMOD |= 0x01;
 148   1        TH0 = 0xFF;
 149   1        TL0 = 0xEE;
 150   1        EA = 1;
 151   1        ET0 = 1;
 152   1        TR0 = 1;
 153   1      }
 154          
 155          void Timer0Interrupt(void) interrupt 1
 156          {
 157   1        rise_counter++;
 158   1        fall_counter++;
 159   1        test_counter++;
 160   1        if(fall_counter>time_seq[fall_time_index] && direction == 0)
 161   1        {
 162   2          fall_counter=0;
 163   2          if(CCAP1H<0xf9)
 164   2          {
 165   3            CCAP1H+=0x02;
 166   3          }
 167   2          else{
 168   3            CCAP1H=0xff;
 169   3            PCA_PWM1=0x03;
 170   3          }
 171   2          if(CCAP0H<0xf9)
 172   2          {
 173   3            CCAP0H+=0x02;
 174   3          }
 175   2          else{
 176   3            CCAP0H=0xff;
C51 COMPILER V9.59.0.0   MAIN                                                              12/08/2022 19:18:00 PAGE 4   

 177   3            PCA_PWM0=0x03;
 178   3          }
 179   2        }
 180   1        
 181   1          if(rise_counter>time_seq[rise_time_index] && direction == 1)
 182   1        {
 183   2          rise_counter=0;
 184   2          PCA_PWM1=0x00;
 185   2      
 186   2          if(CCAP1H == 0){
 187   3            CCAP1H = 0;
 188   3          }
 189   2          else if(CCAP1H >= 0x01 && CCAP1H<0x13)
 190   2          {
 191   3            CCAP1H-=1;
 192   3          }
 193   2          else if(CCAP1H >= 0x13)
 194   2          {
 195   3            CCAP1H-=2;
 196   3          }
 197   2          if(CCAP1H < 0x40){
 198   3            PCA_PWM0=0x00;
 199   3            if(CCAP0H == 0){
 200   4              CCAP0H = 0;
 201   4            }
 202   3            else if(CCAP0H >= 0x01 && CCAP0H<0x23)
 203   3            {
 204   4              CCAP0H-=1;
 205   4            }
 206   3            else if(CCAP0H >= 0x23)
 207   3            {
 208   4              CCAP0H-=2;
 209   4            }
 210   3          } 
 211   2        }
 212   1        if(test_counter>10000){
 213   2          test_counter=0;
 214   2        }
 215   1        TH0 = 0x0FF;
 216   1        TL0 = 0x0EE;
 217   1      }
 218          
 219          void UARTInterrupt(void) interrupt 4
 220          {
 221   1        if(RI){
 222   2          static BYTE BUF_COUNTER=0;
 223   2          
 224   2            if (BUF_COUNTER<BUF_LEN)
 225   2            {
 226   3              RX_BUFFER[BUF_COUNTER]=SBUF;
 227   3              BUF_COUNTER++;
 228   3            }
 229   2      
 230   2            if(BUF_COUNTER >= BUF_LEN)  //处理数据帧
 231   2            {
 232   3              BUF_COUNTER = 0;
 233   3              //dealing with codes
 234   3              if(RX_BUFFER[0]==0x72 && RX_BUFFER[2]==0x66){          // rxfx 格式
 235   4                if(RX_BUFFER[1]>=0x31 && RX_BUFFER[1]<=0x35 && RX_BUFFER[3]>=0x31 && RX_BUFFER[3]<=0x35){
 236   5                  if(rise_time_index != RX_BUFFER[1]-0x31 || fall_time_index != RX_BUFFER[3]-0x31 ){
 237   6                    rise_time_index = RX_BUFFER[1]-0x31 ;
 238   6                    fall_time_index = RX_BUFFER[3]-0x31 ;     
C51 COMPILER V9.59.0.0   MAIN                                                              12/08/2022 19:18:00 PAGE 5   

 239   6                    ISPEraseSector(ISP_ADDRESS);
 240   6                    ISPProgramByte(ISP_ADDRESS,rise_time_index);
 241   6                    ISPProgramByte(ISP_ADDRESS+1,fall_time_index);
 242   6                    SendString("reconfigure rise/fall time!\n");
 243   6                  }
 244   5                  SendString("set!\n");
 245   5                  SendData('\n');
 246   5                }
 247   4                else{
 248   5                  SendString("invalid level\n");
 249   5                }
 250   4              }
 251   3              else{
 252   4                SendString("invalid cmd\n");
 253   4              }
 254   3            ClearRX_BUF();
 255   3          }
 256   2        RI=0;
 257   2      }
 258   1        if(TI){
 259   2          TI = 0;
 260   2        }
 261   1      }
 262          
 263          /*----------------------------
 264          Software delay function
 265          ----------------------------*/
 266          void Delay(BYTE n)
 267          {
 268   1          WORD x;
 269   1      
 270   1          while (n--)
 271   1          {
 272   2              x = 0;
 273   2              while (++x);
 274   2          }
 275   1      }
 276          
 277          /*----------------------------
 278          Disable ISP/ISP/EEPROM function
 279          Make MCU in a safe state
 280          ----------------------------*/
 281          void ISPIdle()
 282          {
 283   1          ISP_CONTR = 0;                  //Close ISP function
 284   1          ISP_CMD = 0;                    //Clear command to standby
 285   1          ISP_TRIG = 0;                   //Clear trigger register
 286   1          ISP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
 287   1          ISP_ADDRL = 0;                  //Clear ISP address to prevent misuse
 288   1      }
 289          
 290          /*----------------------------
 291          Read one byte from ISP/ISP/EEPROM area
 292          Input: addr (ISP/ISP/EEPROM address)
 293          Output:Flash data
 294          ----------------------------*/
 295          BYTE ISPReadByte(WORD addr)
 296          {
 297   1          BYTE dat;                       //Data buffer
 298   1      
 299   1          ISP_CONTR = ENABLE_ISP;         //Open ISP function, and set wait time
 300   1          ISP_CMD = CMD_READ;             //Set ISP/ISP/EEPROM READ command
C51 COMPILER V9.59.0.0   MAIN                                                              12/08/2022 19:18:00 PAGE 6   

 301   1          ISP_ADDRL = addr;               //Set ISP/ISP/EEPROM address low
 302   1          ISP_ADDRH = addr >> 8;          //Set ISP/ISP/EEPROM address high
 303   1          ISP_TRIG = 0x46;                //Send trigger command1 (0x46)
 304   1          ISP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
 305   1          _nop_();                        //MCU will hold here until ISP/ISP/EEPROM operation complete
 306   1          dat = ISP_DATA;                 //Read ISP/ISP/EEPROM data
 307   1          ISPIdle();                      //Close ISP/ISP/EEPROM function
 308   1      
 309   1          return dat;                     //Return Flash data
 310   1      }
 311          
 312          /*----------------------------
 313          Program one byte to ISP/ISP/EEPROM area
 314          Input: addr (ISP/ISP/EEPROM address)
 315                 dat (ISP/ISP/EEPROM data)
 316          Output:-
 317          ----------------------------*/
 318          void ISPProgramByte(WORD addr, BYTE dat)
 319          {
 320   1          ISP_CONTR = ENABLE_ISP;         //Open ISP function, and set wait time
 321   1          ISP_CMD = CMD_PROGRAM;          //Set ISP/ISP/EEPROM PROGRAM command
 322   1          ISP_ADDRL = addr;               //Set ISP/ISP/EEPROM address low
 323   1          ISP_ADDRH = addr >> 8;          //Set ISP/ISP/EEPROM address high
 324   1          ISP_DATA = dat;                 //Write ISP/ISP/EEPROM data
 325   1          ISP_TRIG = 0x46;                //Send trigger command1 (0x46)
 326   1          ISP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
 327   1          _nop_();                        //MCU will hold here until ISP/ISP/EEPROM operation complete
 328   1          ISPIdle();
 329   1      }
 330          
 331          /*----------------------------
 332          Erase one sector area
 333          Input: addr (ISP/ISP/EEPROM address)
 334          Output:-
 335          ----------------------------*/
 336          void ISPEraseSector(WORD addr)
 337          {
 338   1          ISP_CONTR = ENABLE_ISP;         //Open ISP function, and set wait time
 339   1          ISP_CMD = CMD_ERASE;            //Set ISP/ISP/EEPROM ERASE command
 340   1          ISP_ADDRL = addr;               //Set ISP/ISP/EEPROM address low
 341   1          ISP_ADDRH = addr >> 8;          //Set ISP/ISP/EEPROM address high
 342   1          ISP_TRIG = 0x46;                //Send trigger command1 (0x46)
 343   1          ISP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
 344   1          _nop_();                        //MCU will hold here until ISP/ISP/EEPROM operation complete
 345   1          ISPIdle();
 346   1      }
 347          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    990    ----
   CONSTANT SIZE    =    215    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
